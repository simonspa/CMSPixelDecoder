# this file uses emacs Org mode formatting -*- mode: Org; -*-
* Overview
  The CMSPixelDecoder classes aim to provide a full-featured data decoder from
  raw data read from any kind of CMS PSI46 Pixel Readout Chips or combinations
  of them such as modules (16 ROCs) or telescopes.

  It can handle data
   * from any number of ROCs
   * taken with TBM, with TBM emulation or without any TBM headers
   * from both PSI testboards and RAL testboards (IPBus)

  Both single events and full files can be decoded.

* Usage
** Decoding of single events
   
** Decoding of full data files
   text
* Configuration
* Statistics and returns
  CMSPixelDecoder collects decoding statistics during the run. These can either
  be obtained by accessing the statistics struct of the respective class or by
  printing the full statistics summary to screen.

** Statistics for Single Event Decoding
   can be obtained until the object is destructed by calling

   dec->statistics.<variable>
  
   For a list of available variables see below.

** Statistics for File Decoding

** List of statistics variables
   uint32_t head_data:
      Number of detected testboard data markers
   uint32_t head_trigger:
      Number of detected testboard trigger markers
   uint32_t evt_valid:
      Number of valid events (everything allright)
   uint32_t evt_empty:
      Number of empty events (fine, but contained no pixel)
   uint32_t evt_invalid:
      Number of invalid events (something is fishy with this)
      * No ROC headers / wrong number of ROC headers
      * Missing TBM Header or Trailer
   uint32_t pixels_valid:
      Number of correctly decoded pixel hits
   uint32_t pixels_invalid:
      Number of pixel hits with invalid address or zero-bit (undecodable)
      Events containing only some invalid pixels are still delivered, only
      return value is set.

* Logging and debugging
  CMSPixelDecoder has a builtin logging feature which can be used to debug the
  data decoding. It provides several logging levels, the output is directed to
  stderr. You can chose from the following detail levels:
  * QUIET    - No output at all.
  * SUMMARY  - As QUITE but prints the statistics summary when destructed
  * ERROR    - Prints all errors encountered during the decoding (invalid events)
  * WARNING  - Prints additional information about failed pixel decoding.
  * INFO     - Prints information about found hits
  * DEBUG    - Informs about the current status of the decoding steps
  * DEBUG1-4 - additional debugging levels printing even more stuff to stderr.

  Be aware of the fact that enabled logging slows down the encoding by quite a
  bit. So only turn it on if you need it!
